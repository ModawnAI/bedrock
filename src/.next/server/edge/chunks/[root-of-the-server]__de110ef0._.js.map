{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Dynamically import edge-config only when available\nasync function getEdgeConfig(key: string) {\n  try {\n    const { get } = await import('@vercel/edge-config');\n    return await get(key);\n  } catch (error) {\n    // Edge config not available (e.g., in development)\n    return null;\n  }\n}\n\nexport async function middleware(request: NextRequest) {\n  // Only run A/B testing on the home page\n  if (request.nextUrl.pathname !== '/') {\n    return NextResponse.next();\n  }\n\n  const response = NextResponse.next();\n  \n  // Check if user already has a variant assigned\n  const existingVariant = request.cookies.get('cta-variant');\n  \n  if (existingVariant) {\n    // User already has a variant, continue with existing assignment\n    response.headers.set('x-cta-variant', existingVariant.value);\n    return response;\n  }\n\n  try {\n    // Get A/B testing configuration from Vercel Edge Config\n    const abTestConfig = await getEdgeConfig('cta-ab-test');\n    \n    if (!abTestConfig || typeof abTestConfig !== 'object') {\n      // Fallback to variant A if config is not available\n      response.cookies.set('cta-variant', 'A', {\n        maxAge: 30 * 24 * 60 * 60, // 30 days\n        httpOnly: false, // Allow client-side access for analytics\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'lax'\n      });\n      response.headers.set('x-cta-variant', 'A');\n      return response;\n    }\n\n    const config = abTestConfig as {\n      enabled: boolean;\n      variants: { [key: string]: { weight: number; text: string } };\n    };\n\n    if (!config.enabled) {\n      // A/B testing is disabled, use variant A\n      response.cookies.set('cta-variant', 'A', {\n        maxAge: 30 * 24 * 60 * 60,\n        httpOnly: false,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'lax'\n      });\n      response.headers.set('x-cta-variant', 'A');\n      return response;\n    }\n\n    // Calculate which variant to assign based on weights\n    const variants = Object.entries(config.variants);\n    const totalWeight = variants.reduce((sum, [, variant]) => sum + variant.weight, 0);\n    const random = Math.random() * totalWeight;\n    \n    let cumulativeWeight = 0;\n    let selectedVariant = 'A'; // Default fallback\n    \n    for (const [variantKey, variant] of variants) {\n      cumulativeWeight += variant.weight;\n      if (random <= cumulativeWeight) {\n        selectedVariant = variantKey;\n        break;\n      }\n    }\n\n    // Set the variant cookie and header\n    response.cookies.set('cta-variant', selectedVariant, {\n      maxAge: 30 * 24 * 60 * 60, // 30 days\n      httpOnly: false, // Allow client-side access for analytics\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax'\n    });\n    response.headers.set('x-cta-variant', selectedVariant);\n    \n    return response;\n  } catch (error) {\n    console.error('A/B testing middleware error:', error);\n    \n    // Fallback to variant A on error\n    response.cookies.set('cta-variant', 'A', {\n      maxAge: 30 * 24 * 60 * 60,\n      httpOnly: false,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax'\n    });\n    response.headers.set('x-cta-variant', 'A');\n    return response;\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder files\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\.).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,qDAAqD;AACrD,eAAe,cAAc,GAAW;IACtC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG;QAChB,OAAO,MAAM,IAAI;IACnB,EAAE,OAAO,OAAO;QACd,mDAAmD;QACnD,OAAO;IACT;AACF;AAEO,eAAe,WAAW,OAAoB;IACnD,wCAAwC;IACxC,IAAI,QAAQ,OAAO,CAAC,QAAQ,KAAK,KAAK;QACpC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;IAElC,+CAA+C;IAC/C,MAAM,kBAAkB,QAAQ,OAAO,CAAC,GAAG,CAAC;IAE5C,IAAI,iBAAiB;QACnB,gEAAgE;QAChE,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB,gBAAgB,KAAK;QAC3D,OAAO;IACT;IAEA,IAAI;QACF,wDAAwD;QACxD,MAAM,eAAe,MAAM,cAAc;QAEzC,IAAI,CAAC,gBAAgB,OAAO,iBAAiB,UAAU;YACrD,mDAAmD;YACnD,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK;gBACvC,QAAQ,KAAK,KAAK,KAAK;gBACvB,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,UAAU;YACZ;YACA,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;YACtC,OAAO;QACT;QAEA,MAAM,SAAS;QAKf,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,yCAAyC;YACzC,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK;gBACvC,QAAQ,KAAK,KAAK,KAAK;gBACvB,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,UAAU;YACZ;YACA,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;YACtC,OAAO;QACT;QAEA,qDAAqD;QACrD,MAAM,WAAW,OAAO,OAAO,CAAC,OAAO,QAAQ;QAC/C,MAAM,cAAc,SAAS,MAAM,CAAC,CAAC,KAAK,GAAG,QAAQ,GAAK,MAAM,QAAQ,MAAM,EAAE;QAChF,MAAM,SAAS,KAAK,MAAM,KAAK;QAE/B,IAAI,mBAAmB;QACvB,IAAI,kBAAkB,KAAK,mBAAmB;QAE9C,KAAK,MAAM,CAAC,YAAY,QAAQ,IAAI,SAAU;YAC5C,oBAAoB,QAAQ,MAAM;YAClC,IAAI,UAAU,kBAAkB;gBAC9B,kBAAkB;gBAClB;YACF;QACF;QAEA,oCAAoC;QACpC,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,iBAAiB;YACnD,QAAQ,KAAK,KAAK,KAAK;YACvB,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;QACZ;QACA,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;QAEtC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,iCAAiC;QACjC,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK;YACvC,QAAQ,KAAK,KAAK,KAAK;YACvB,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;QACZ;QACA,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;QACtC,OAAO;IACT;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}